<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>var rectagleLeftTop = Point(x: 0, y: 0)
var rectangleRightTop = Point(x: 0, y: 0)
var triangleHight = Point(x: 0, y: 0)
var startWidth: Double = 20




func drawRectangle (width: Double, rotationrec: Double, centery: Double){
    // position
    let rectangle = Rectangle(width: width, height: width)
    rectangle.rotation = rotationrec
    rectangle.center.y = 0
    rectangle.center.y += centery
        // Style
    rectangle.color = .white
    rectangle.borderColor = .black
    rectangle.borderWidth = 2
        //coordinates of the corners
    rectagleLeftTop = Point(x: -(width/2), y: centery+(width/2))
    rectangleRightTop = Point(x: +(width/2), y: centery+(width/2))
}

func drawTriangle(width: Double) {
    let lineOne = Line(start: rectagleLeftTop, end: Point(x: rectagleLeftTop.x + (2/3)*width, y: rectagleLeftTop.y), thickness: 0.25)
    lineOne.color = .black
    lineOne.rotation = -0.5235988
    
} 

/*
func drawTriangle(width: Double) {
    //calculate hight of the rectangle 
    triangleHight = Point(x: rectangleRightTop.x-((1/3)*width), y: rectangleRightTop.y+((1/3)*width))
    
    //right line
    let lineOne = Line(start: rectangleRightTop, end: triangleHight, thickness: 0.25)
    lineOne.color = .black
    
    //newRectangle
    let rec11 = Line(start: rectangleRightTop, end: triangleHight, thickness: 0.25)
    rec11.color = .black
    rec11.rotation = (Double.pi/2)
    
    
    //left line
    let lineTwo = Line(start: rectagleLeftTop, end: triangleHight, thickness: 0.25)
    lineTwo.color = .black
}*/

func pythagorasRectagle (width: Double){
    
}

//code
drawRectangle(width: startWidth, rotationrec: 0, centery: -5)
drawTriangle(width: startWidth)
</string>
			<key>ModifiedRange</key>
			<string>{283, 1696}</string>
			<key>OriginalContent</key>
			<string>let circle = Circle()
circle.draggable = true

</string>
			<key>OriginalRange</key>
			<string>{283, 47}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
